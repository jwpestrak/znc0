A <- sets::set(letters[1:3])
B <- sets::set(letters[3:5])
sets::set_similarity(A, B)
A <- sets::set("a", "b", "c")
B <- sets::set("c", "d", "e")
sets::set_similarity(A, B)
df_pc
# duration (secs) per session
df_dr <- sample_clicks %>%
select(Session_ID, Timestamp) %>%
group_by(Session_ID) %>%
summarize(drtn = as.integer(max(Timestamp) - min(Timestamp))) %>%
ungroup()
E
ind_sample <- TRUE
sample_clicks
load("sample_clicks")
?load()
devtools::load_aall()
devtools::load_all()
ind_sample <- TRUE
sample_clicks
load("data/sample_clicks.rda")
sample_clicks
sample_buys
load("data/sample_buys.rda")
sample_buys
df_dr <- sample_clicks %>%
select(Session_ID, Timestamp) %>%
group_by(Session_ID) %>%
summarize(drtn = as.integer(max(Timestamp) - min(Timestamp))) %>%
ungroup()
df_dr
df_pc <- sample_clicks %>%
select(Session_ID) %>%
group_by(Session_ID) %>%
summarize(cnt_pc = n()) %>%
ungroup()
df_pc
category_groups <- data_frame(
Category = c("0", "S", as.character(1:12)),
cgrp = c("x0", "xS", rep("xC", 12))
)
df_cg <- sample_clicks %>%
select(Session_ID, Category) %>%
left_join(
y = category_groups,
by = c("Category")
) %>%
mutate(cgrp = replace(cgrp, is.na(cgrp), "xB")) %>% # NAs are brand-specific
select(Session_ID, cgrp) %>%
reshape2::dcast(
formula = Session_ID ~ cgrp,
fill = 0,
drop = FALSE,
fun.aggregate = length
)
df_cg
str(df_cg)
sample_clicks %>%
select(Session_ID, Category) %>%
left_join(
y = category_groups,
by = c("Category")
) %>%
glimpse()
sample_clicks %>%
select(Session_ID, Category) %>%
glimpse()
df_cg <- sample_clicks %>%
select(Session_ID, Category) %>%
left_join(
y = category_groups,
by = c("Category")
)
str(df_cg)
table(df_cg, useNA = "always")
str(df_cg$cgrp)
table(df_cg$cgrp, useNA = "always")
category_groups
sum(sample_clicks$Category == "0")
sum(sample_clicks$Category == "0", na.rm = TRUE)
sample_clicks
sample_clicks$Category[is.na(sample_clicks$Category)] <- "0"
df_cg <- sample_clicks %>%
select(Session_ID, Category) %>%
left_join(
y = category_groups,
by = c("Category")
) %>%
mutate(cgrp = replace(cgrp, is.na(cgrp), "xB")) %>% # NAs are brand-specific
select(Session_ID, cgrp) %>%
reshape2::dcast(
formula = Session_ID ~ cgrp,
fill = 0,
drop = FALSE,
fun.aggregate = length
) %>%
tbl_df()
df_cg
dta_inpt <- inner_join(
x  = df_dr,
y  = inner_join(
x  = df_pc,
y  = df_cg,
by = "Session_ID"
),
by = "Session_ID"
)
# z_clicks <- make_features(df_clk = sample_clicks)
df_inpt
dta_inpt
sample_buys
inner_join(
x  = df_dr,
y  = inner_join(
x  = df_pc,
y  = df_cg,
by = "Session_ID"
),
by = "Session_ID"
) %>%
left_join(
y = data_frame(Session_ID = unique(sample_buys$Session_ID), ind_buy = "Y"),
by = "Session_ID"
)
dta_inpt <- inner_join(
x  = df_dr,
y  = inner_join(
x  = df_pc,
y  = df_cg,
by = "Session_ID"
),
by = "Session_ID"
) %>%
left_join(
y = data_frame(Session_ID = unique(sample_buys$Session_ID), ind_buy = "Y"),
by = "Session_ID"
) %>%
mutate(
ind_buy = replace(ind_buy, is.na(ind_buy), "N"),
ind_buy = factor(ind_buy)
)
dta_inpt
table(dta_inpt$ind_buy, useNA = "always")
5209/92497
sample_rate <- 0.70
sample_idx <- sample(1:nrow(dta_inpt), floor(nrow(dta_inpt) * sample_rate))
train <- dta_inpt[sample_idx, ]
test <- dta_inpt[-sample_idx, ]
frml <- formula(ind_buy ~ drtn + cnt_pc + x0 + xS + xC + xB)
# fit model - recursive partitioning
fit_rprt <- rpart::rpart(
formula = frml,
method = "class",
data = train
)
# fit model - logistic regression
fit_lreg <- glm(
formula = frml,
family = binomial(link = "logit"),
data = train
)
# summary(fit)
# pscl::pR2(fit)
# accuracy
pred_rprt <- predict(
object = fit_rprt,
newdata = test,
type = "response"
)
ROSE::roc.curve(
response = test$ind_buy,
predicted = pred_rprt
)
pred_lreg <- predict(
object = fit_lreg,
newdata = test,
type = "response"
)
ROSE::roc.curve(
response = test$ind_buy,
predicted = pred_lreg
)
library(ROSE)
train_rose <- ROSE(
formula = frml,
data = train
)$data
str(train)
str(train_rose)
table(train$ind_buy, useNA = "always")
table(train_rose$ind_buy, useNA = "always")
# fit model - logistic regression
fit_lreg <- glm(
formula = frml,
family = binomial(link = "logit"),
data = train_rose
)
# summary(fit)
# pscl::pR2(fit)
pred_lreg <- predict(
object = fit_lreg,
newdata = test,
type = "response"
)
ROSE::roc.curve(
response = test$ind_buy,
predicted = pred_lreg
)
pred_lreg <- predict(
object = fit_lreg,
newdata = test,
type = "response"
)
roc.curve(
response = test$ind_buy,
predicted = pred_lreg
)
str(pred_lreg)
ggplot2::ggplot(data = sample_clicks %>% group_by(Session_ID) %>% summarize(drtn = max(Timestamp) - min(Timestamp), dcnt_item = n_distinct(Item_ID)) %>% ungroup(), mapping = ggplot2::aes(x = drtn, y = dcnt_item)) + ggplot2::geom_point()
dta_inpt_gt2 <- dta_inpt %>% filter(cnt_pc > 2)
str(dta_inpt_gt2)
str(dta_inpt_lte2)
dta_inpt_lte2 <- dta_inpt %>% filter(cnt_pc <= 2)
str(dta_inpt_lte2)
dta_inpt <- dta_inpt
str(dta_inpt)
dta_inpt <- dta_inpt_gt2
sample_rate <- 0.70
sample_idx <- sample(1:nrow(dta_inpt), floor(nrow(dta_inpt) * sample_rate))
train <- dta_inpt[sample_idx, ]
test <- dta_inpt[-sample_idx, ]
# Fit classification models-----------------------------------------------------
# formula
frml <- formula(ind_buy ~ drtn + cnt_pc + x0 + xS + xC + xB)
# generate random over-sampling examples
train_rose <- ROSE(
formula = frml,
data = train
)$data
# fit model - recursive partitioning
fit_rprt <- rpart::rpart(
formula = frml,
method = "class",
data = train
)
# fit model - logistic regression
fit_lreg <- glm(
formula = frml,
family = binomial(link = "logit"),
data = train_rose
)
# pscl::pR2(fit)
# accuracy
pred_lreg <- predict(
object = fit_lreg,
newdata = test,
type = "response"
)
ROSE::roc.curve(
response = test$ind_buy,
predicted = pred_lreg
)
?roc.curve
pred_lreg <- predict(
object = fit_lreg,
newdata = test,
type = "response"
)
roc.curve(
response = test$ind_buy,
predicted = pred_lreg,
main = "ROC curve - logistic regression"
)
# accuracy
pred_rprt <- predict(
object = fit_rprt,
newdata = test,
type = "response"
)
roc.curve(
response = test$ind_buy,
predicted = pred_lreg,
main = "ROC curve - recursive partitioning"
)
pred_rprt <- predict(
object = fit_rprt,
newdata = test,
type = "class"
)
roc.curve(
response = test$ind_buy,
predicted = pred_lreg,
main = "ROC curve - recursive partitioning"
)
pred_rprt <- predict(
object = fit_rprt,
newdata = test,
type = "class"
)
roc.curve(
response = test$ind_buy,
predicted = pred_rprt,
main = "ROC curve - recursive partitioning"
)
fit_rprt <- rpart::rpart(
formula = frml,
method = "class",
data = train_rose
)
pred_rprt <- predict(
object = fit_rprt,
newdata = test,
type = "class"
)
roc.curve(
response = test$ind_buy,
predicted = pred_rprt,
main = "ROC curve - recursive partitioning"
)
str(preds)
str(pred_lreg)
str(fit_rprt)
save(fit_rprt, "inst/fit/fit_rprt.rda")
devtools::load_all()
save(fit_rprt, "inst/fit/fit_rprt.rda")
save(fit_rprt, file = "inst/fit/fit_rprt.rda")
dta_inpt <- inner_join(
x  = df_dr,
y  = inner_join(
x  = df_pc,
y  = df_cg,
by = "Session_ID"
),
by = "Session_ID"
) %>%
left_join(
y = data_frame(Session_ID = unique(sample_buys$Session_ID), ind_buy = "Y"),
by = "Session_ID"
) %>%
mutate(
ind_buy = replace(ind_buy, is.na(ind_buy), "N"),
ind_buy = factor(ind_buy)
)
str(dta_inpt)
sample_rate <- 0.70
sample_idx <- sample(1:nrow(dta_inpt), floor(nrow(dta_inpt) * sample_rate))
train <- dta_inpt[sample_idx, ]
test <- dta_inpt[-sample_idx, ]
frml <- formula(ind_buy ~ drtn + cnt_pc + x0 + xS + xC + xB)
# generate random over-sampling examples
train_rose <- ROSE(
formula = frml,
data = train
)$data
# fit model - recursive partitioning
fit_rprt <- rpart::rpart(
formula = frml,
method = "class",
data = train_rose
)
save(fit_rprt, file = "inst/fit/fit_rprt.rda")
# fit model - logistic regression
fit_lreg <- glm(
formula = frml,
family = binomial(link = "logit"),
data = train_rose
)
save(fit_lreg, file = "inst/fit/fit_lreg.rda")
# pscl::pR2(fit)
# accuracy
pred_rprt <- predict(
object = fit_rprt,
newdata = test,
type = "class"
)
roc.curve(
response = test$ind_buy,
predicted = pred_rprt,
main = "ROC curve - recursive partitioning"
)
pred_lreg <- predict(
object = fit_lreg,
newdata = test,
type = "response"
)
roc.curve(
response = test$ind_buy,
predicted = pred_lreg,
main = "ROC curve - logistic regression"
)
479 / (479+29802)
solution_clicks
df_dr_solution <- solution_clicks %>%
select(Session_ID, Timestamp) %>%
group_by(Session_ID) %>%
summarize(drtn = as.integer(max(Timestamp) - min(Timestamp))) %>%
ungroup()
df_dr_solution
df_pc_solution <- solution_clicks %>%
select(Session_ID) %>%
group_by(Session_ID) %>%
summarize(cnt_pc = n()) %>%
ungroup()
df_cg_solution <- solution_clicks %>%
select(Session_ID, Category) %>%
left_join(
y = category_groups,
by = c("Category")
) %>%
mutate(cgrp = replace(cgrp, is.na(cgrp), "xB")) %>% # NAs are brand-specific
select(Session_ID, cgrp) %>%
reshape2::dcast(
formula = Session_ID ~ cgrp,
fill = 0,
drop = FALSE,
fun.aggregate = length
) %>%
tbl_df()
solution_buys
dta_inpt_solution <- inner_join(
x  = df_dr_solution,
y  = inner_join(
x  = df_pc_solution,
y  = df_cg_solution,
by = "Session_ID"
),
by = "Session_ID"
) %>%
left_join(
y = data_frame(Session_ID = unique(solution_buys$Session_ID), ind_buy = "Y"),
by = "Session_ID"
) %>%
mutate(
ind_buy = replace(ind_buy, is.na(ind_buy), "N"),
ind_buy = factor(ind_buy)
)
solution_pred_lreg <- predict(
object = fit_lreg,
newdata = dta_inpt_solution,
type = "response"
)
roc.curve(
response = dta_inpt_solution$ind_buy,
predicted = solution_pred_lreg,
main = "ROC curve - logistic regression"
)
solution_pred_rprt <- predict(
object = fit_rprt,
newdata = dta_inpt_solution,
type = "class"
)
roc.curve(
response = dta_inpt_solution$ind_buy,
predicted = solution_pred_rprt,
main = "ROC curve - recursive partition"
)
help(package = "ROSE")
?caret::confusionMatrix()
?caret::confusionMatrix
caret::confusionMatrix(data = solution_pred_lreg, reference = dta_inpt_solution$ind_buy, positive = "Y", dnn = c("Predicted", "Actual"))
str(solution_pred_lreg)
summary(solution_pred_lreg)
solution_pred_lreg_fctr <- factor(ifelse(solution_pred_lreg > 0.50, "Y", "N"))
caret::confusionMatrix(data = solution_pred_lreg_fctr, reference = dta_inpt_solution$ind_buy, positive = "Y", dnn = c("Predicted", "Actual"))
nrow(solution_clicks)
length(unique(solution_clicks$Session_ID))
1793165/ length(unique(solution_clicks$Session_ID))
391008/ length(unique(solution_clicks$Session_ID))
61028+67231
(1793165) / (1793165+67231)
61028 / (128259)
1793165/(1793165+391008)
(61028-391008)/2312432
length(unique(solution_clicks$Session_ID))
dta_inpt_gt2 <- dta_inpt %>% filter(cnt_pc > 2)
dta_inpt_gt2 <- solution_clicks %>% filter(cnt_pc > 2)
dta_inpt_lte2 <- solution_clicks %>% filter(cnt_pc <= 2)
dta_inpt_gt2 <- dta_inpt_solution %>% filter(cnt_pc > 2)
dta_inpt_lte2 <- dta_inpt_solution %>% filter(cnt_pc <= 2)
dta_inpt_lte2
str(solution_pred_lreg_fctr)
solution_buys
z <- left_join(dta_inpt_solution, solution_buys %>% select(Session_ID, Items))
z
z %>% filter(cnt_pc == 1, !is.na(Items), ind_buy == "Y")
solution_clicks %>% filter(Session_ID == "10000135")
sets::set_similarity("214850790", "214850790")
str(solution_pred_lreg_fctr)
dta_inpt_gt2 <- dta_inpt_solution %>% filter(cnt_pc > 2)
dta_inpt_lte2 <- dta_inpt_solution %>% filter(cnt_pc <= 2)
z$preds <- solution_pred_lreg_fctr
z
z %>% select(Session_ID, cnt_pc, ind_buy, preds)
z %>% filter(cnt_pc == 1, !is.na(Items), ind_buy == "Y", preds == "Y")
z %>% filter(cnt_pc == 1, ind_buy == "Y", preds == "Y")
z %>% filter(cnt_pc == 2, ind_buy == "Y", preds == "Y")
z %>% filter(ind_buy == "Y", preds == "Y")
xx <- z %>% filter(cnt_pc > 2, ind_buy == "Y", preds == "Y") %>% select(Session_ID)
solution_clicks
#yy <- solution_clicks %>% arrange(Session_ID, Timestamp) %>% select(Session_ID, Item_ID) %>% distinct() %>% group_by(Session_ID) %>% summarize(Items = paste(Item_ID, collapse = ",")) %>% ungroup()
solution_clicks %>% sample_n(1000) %>% arrange(Session_ID, Timestamp) %>% select(Session_ID, Item_ID) %>% distinct() %>% group_by(Session_ID) %>% summarize(Items = paste(Item_ID, collapse = ",")) %>% ungroup()
solution_clicks %>% sample_n(1000) %>% arrange(Session_ID, Timestamp) %>% select(Session_ID, Item_ID) %>% distinct() %>% group_by(Session_ID) %>% summarize(Items = paste(Item_ID, collapse = ",")) %>% ungroup() %>% arrange(-nchar(Items))
solution_clicks %>% sample_n(10000) %>% arrange(Session_ID, Timestamp) %>% select(Session_ID, Item_ID) %>% distinct() %>% group_by(Session_ID) %>% summarize(Items = paste(Item_ID, collapse = ",")) %>% ungroup() %>% arrange(-nchar(Items))
yy <- solution_clicks %>% arrange(Session_ID, Timestamp) %>% select(Session_ID, Item_ID) %>% distinct() %>% group_by(Session_ID) %>% summarize(cnt_pc = n(), Items = paste(Item_ID, collapse = ",")) %>% ungroup() %>% filter(cnt_pc > 2)
yy
xy <- inner_join(xx, yy, by = "Session_ID")
xy
inner_join(xy, solution_buys)
inner_join(xy, solution_buys, by = "Session_ID")
savehistory("~/programming/R/znc0/inst/histories/working_20160502.Rhistory")
